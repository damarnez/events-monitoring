org: danielnota
app: events-monitoring
service: events-monitoring

provider:
  name: aws
  region: eu-central-1
  runtime: nodejs12.x
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"
    - Effect: Allow
      Action:
        - ec2:DescribeNetworkInterfaces
        - ec2:CreateNetworkInterface
        - ec2:DeleteNetworkInterface
        - ec2:DescribeInstances
        - ec2:AttachNetworkInterface
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:GetRecords
      Resource: "*"
    - Effect: Allow
      Action:
        - elasticache:*
      Resource: "*"
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "*"
custom:
  url_infura_01: ${env:URL_INFURA_01}
  url_infura_02: ${env:URL_INFURA_02}
  url_redis: ${env:URL_REDIS}
  url_dynamodb: ${env:URL_DYNAMODB}

package:
  # individually: true
  include:
    - src/utils

functions:
  watchlogs:
    handler: src/WatchLogsFromEthereum/handler.watch
    timeout: 178
    provisionedConcurrency: 0
    concurrencyAutoscaling: false
    events:
      - schedule:
          rate: rate(3 minutes)
          enabled: true
    package:
      include:
        - src/WatchLogsFromEthereum/logswatcher.ts
    vpc:
      securityGroupIds:
        - sg-0b619b76
      subnetIds:
        - subnet-d44b9898
        - subnet-e273e288
    environment:
      URL_INFURA_01: ${self:custom.url_infura_01}
      URL_INFURA_02: ${self:custom.url_infura_02}
      URL_REDIS: ${self:custom.url_redis}
  filterevents:
    handler: src/FilterEvents/handler.filter
    vpc:
      securityGroupIds:
        - sg-0b619b76
      subnetIds:
        - subnet-d44b9898
        - subnet-e273e288
    environment:
      URL_REDIS: ${self:custom.url_redis}
  checkconditions:
    handler: src/CheckConditions/handler.check
    vpc:
      securityGroupIds:
        - sg-0b619b76
      subnetIds:
        - subnet-d44b9898
        - subnet-e273e288
    environment:
      URL_REDIS: ${self:custom.url_redis}
  updatecounterstatus:
    handler: src/UpdateCounterStatus/handler.update
    timeout: 240
    environment:
      URL_REDIS: ${self:custom.url_redis}
    vpc:
      securityGroupIds:
        - sg-0b619b76
      subnetIds:
        - subnet-d44b9898
        - subnet-e273e288
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [WatchersDynamoDbTable, StreamArn]
  unsubscribeemailbytoken:
    handler: src/UnsubscribeEmailByToken/handler.unsubscribe
    events:
      - http:
          path: email/unsubscribe/{email}/{token}
          method: get
          cors: true
          request:
            parameters:
              paths:
                token: true
                email: true
  validateemailbytoken:
    handler: src/ValidateEmailByToken/handler.validate
    events:
      - http:
          path: email/validate/{email}/{token}
          method: get
          cors: true
          request:
            parameters:
              paths:
                token: true
                email: true
  createnewwatch:
    handler: src/CreateNewWatch/handler.create
    events:
      - http:
          path: watch
          method: post
          cors: true
  sendemailbytopic:
    handler: src/SendEmailByTopic/handler.send
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [WatchersDynamoDbTable, StreamArn]
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [HistoricDynamoDbTable, StreamArn]
plugins:
  - serverless-plugin-typescript
  - serverless-offline-scheduler
  - serverless-offline
resources:
  Resources:
    WatchersDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "email"
            AttributeType: "S"
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "email"
            KeyType: "HASH"
          - AttributeName: "id"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: "Watcher"
    HistoricDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: "NEW_IMAGE"
        TableName: "Historic"
